name: lambda
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - ".github/dependabot.yml"
      - ".vscode/**"
      - "resources/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: install musl gcc
        run: sudo apt install musl-tools

      - uses: actions/checkout@v3
      - uses: Accurate0/rust-toolchain@main
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: cargo build
        run: cargo build --locked --profile release-strip --target x86_64-unknown-linux-musl

      - name: copy artifacts
        run: |
          mkdir ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/api ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/refresh ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/refresh-failure ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/cleanup ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/images ./maccas-api
          cp ./target/x86_64-unknown-linux-musl/release-strip/accounts ./maccas-api

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: maccas-api
          path: ./maccas-api

  artifacts:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task:
          - api
          - cleanup
          - images
          - refresh
          - refresh-failure
          - accounts

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: maccas-api

      - name: create zip (${{ matrix.task }})
        run: |
          mv ./${{ matrix.task }} ./bootstrap
          zip -r bootstrap.zip ./bootstrap

      - name: upload ${{ matrix.task }} artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.task }}
          path: ./bootstrap.zip

  deploy:
    permissions:
      id-token: write
    environment: production
    needs: artifacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task:
          - cleanup
          - images
          - api
          - refresh
          - refresh-failure
          - accounts

    name: deploy ${{ matrix.task }}

    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.task }}

      - name: deploy ${{ matrix.task }}
        run: aws lambda update-function-code --function-name MaccasApi-${{ matrix.task }} --zip-file fileb://bootstrap.zip --region ap-southeast-2

      - name: deploy ${{ matrix.task }} (ap-southeast-1)
        if: matrix.task == 'refresh'
        run: aws lambda update-function-code --function-name MaccasApi-${{ matrix.task }} --zip-file fileb://bootstrap.zip --region ap-southeast-1

      - name: deploy ${{ matrix.task }} (ap-southeast-4)
        if: matrix.task == 'refresh'
        run: aws lambda update-function-code --function-name MaccasApi-${{ matrix.task }} --zip-file fileb://bootstrap.zip --region ap-southeast-4

  upload-config:
    permissions:
      id-token: write
    environment: production
    needs: [artifacts]
    runs-on: ubuntu-latest
    name: upload config

    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: actions/checkout@v3
      - uses: Accurate0/modify-json@v1.1.0
        with:
          __inputFile: ./config.json
          __outputFile: ./base-config.json
          mcdonalds__client_id: ${{ secrets.API_CONFIG_CLIENT_ID }}
          mcdonalds__client_secret: ${{ secrets.API_CONFIG_CLIENT_SECRET }}
          mcdonalds__sensor_data: ${{ secrets.API_CONFIG_SENSOR_DATA }}
          mcdonalds__service_account_name: ${{ secrets.API_CONFIG_SERVICE_ACCOUNT_NAME }}
          api__jwt__jwks_url: ${{ secrets.API_CONFIG_JWKS_URL }}
          api__discord_deal_use__webhooks__0: ${{ secrets.API_CONFIG_DISCORD_WEBHOOK_ELLIOT }}
          api__discord_deal_use__webhooks__1: ${{ secrets.API_CONFIG_DISCORD_WEBHOOK_KEVIN }}
          refresh__discord_error__webhooks__0: ${{ secrets.API_CONFIG_DISCORD_WEBHOOK_SERVICE }}
          proxy__username: ${{ secrets.API_CONFIG_REFRESH_PROXY_USERNAME }}
          proxy__password: ${{ secrets.API_CONFIG_REFRESH_PROXY_PASSWORD }}
          proxy__address: ${{ secrets.API_CONFIG_REFRESH_PROXY_ADDRESS }}
          accounts__email__address: ${{ secrets.API_CONFIG_ACCOUNTS_EMAIL }}
          accounts__email__password: ${{ secrets.API_CONFIG_ACCOUNTS_PASSWORD }}
          accounts__domain_name: ${{ secrets.API_CONFIG_ACCOUNTS_DOMAIN_NAME }}
      - name: upload to s3
        run: aws s3 cp base-config.json s3://maccas-application-config/base-config.json
