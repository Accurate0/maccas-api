//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "offer_details")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub proposition_id: i64,
    pub name: String,
    pub description: String,
    #[sea_orm(column_type = "Double", nullable)]
    pub price: Option<f64>,
    pub short_name: String,
    pub image_base_name: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub raw_data: Option<Json>,
    pub categories: Option<Vec<String>>,
    pub migrated: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::offer_audit::Entity")]
    OfferAudit,
    #[sea_orm(has_one = "super::offer_embeddings::Entity")]
    OfferEmbeddings,
    #[sea_orm(has_many = "super::offer_history::Entity")]
    OfferHistory,
    #[sea_orm(has_many = "super::offers::Entity")]
    Offers,
}

impl Related<super::offer_audit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OfferAudit.def()
    }
}

impl Related<super::offer_embeddings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OfferEmbeddings.def()
    }
}

impl Related<super::offer_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OfferHistory.def()
    }
}

impl Related<super::offers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Offers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
