generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
    previewFeatures = ["tracing"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model User {
    id           String  @id @default(uuid())
    active       Boolean @default(true)
    username     String  @unique
    passwordHash Bytes   @db.ByteA
    role         Role[]  @default([USER])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    configId String? @unique
    config   Config? @relation(fields: [configId], references: [id], onDelete: Cascade)

    Session              Session[] @relation(name: "real_user")
    impersonatedSessions Session[] @relation(name: "impersonating_user")

    @@map("users")
}

enum Priority {
    HIGH
    NORMAL
    LOW
}

enum NotificationType {
    USER_CREATED
    USER_ACTIVATED
    USER_DEACTIVATED
    RATELIMIT_REACHED
}

model Notification {
    id        String           @id @default(uuid())
    content   String
    context   Json             @db.JsonB
    read      Boolean          @default(false)
    priority  Priority
    type      NotificationType
    createdAt DateTime         @default(now())

    @@map("notifications")
}

model Config {
    id        String  @id @default(uuid())
    storeName String?
    storeId   String?
    userId    String  @unique
    User      User?

    @@map("config")
}

model Session {
    id          String   @id
    expires     DateTime
    createdAt   DateTime @default(now())
    accessToken String
    userId      String
    user        User     @relation(name: "real_user", fields: [userId], references: [id], onDelete: Cascade)

    impersonatorUserId String?
    impersonatorUser   User?   @relation(name: "impersonating_user", fields: [impersonatorUserId], references: [id])

    @@map("sessions")
}

enum Role {
    USER
    POINTS
    ADMIN
}
